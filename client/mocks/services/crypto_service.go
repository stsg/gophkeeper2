// Code generated by MockGen. DO NOT EDIT.
// Source: crypto_service.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCryptService is a mock of CryptService interface.
type MockCryptService struct {
	ctrl     *gomock.Controller
	recorder *MockCryptServiceMockRecorder
}

// MockCryptServiceMockRecorder is the mock recorder for MockCryptService.
type MockCryptServiceMockRecorder struct {
	mock *MockCryptService
}

// NewMockCryptService creates a new mock instance.
func NewMockCryptService(ctrl *gomock.Controller) *MockCryptService {
	mock := &MockCryptService{ctrl: ctrl}
	mock.recorder = &MockCryptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptService) EXPECT() *MockCryptServiceMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCryptService) Decrypt(data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCryptServiceMockRecorder) Decrypt(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCryptService)(nil).Decrypt), data)
}

// Encrypt mocks base method.
func (m *MockCryptService) Encrypt(data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCryptServiceMockRecorder) Encrypt(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCryptService)(nil).Encrypt), data)
}
