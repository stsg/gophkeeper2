// Code generated by MockGen. DO NOT EDIT.
// Source: exit_handler.go

// Package shutdown is a generated GoMock package.
package shutdown

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockExitHandler is a mock of ExitHandler interface.
type MockExitHandler struct {
	ctrl     *gomock.Controller
	recorder *MockExitHandlerMockRecorder
}

// MockExitHandlerMockRecorder is the mock recorder for MockExitHandler.
type MockExitHandlerMockRecorder struct {
	mock *MockExitHandler
}

// NewMockExitHandler creates a new mock instance.
func NewMockExitHandler(ctrl *gomock.Controller) *MockExitHandler {
	mock := &MockExitHandler{ctrl: ctrl}
	mock.recorder = &MockExitHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExitHandler) EXPECT() *MockExitHandlerMockRecorder {
	return m.recorder
}

// AddFuncInProcessing mocks base method.
func (m *MockExitHandler) AddFuncInProcessing(alias string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFuncInProcessing", alias)
}

// AddFuncInProcessing indicates an expected call of AddFuncInProcessing.
func (mr *MockExitHandlerMockRecorder) AddFuncInProcessing(alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFuncInProcessing", reflect.TypeOf((*MockExitHandler)(nil).AddFuncInProcessing), alias)
}

// FuncFinished mocks base method.
func (m *MockExitHandler) FuncFinished(alias string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FuncFinished", alias)
}

// FuncFinished indicates an expected call of FuncFinished.
func (mr *MockExitHandlerMockRecorder) FuncFinished(alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FuncFinished", reflect.TypeOf((*MockExitHandler)(nil).FuncFinished), alias)
}

// IsNewFuncExecutionAllowed mocks base method.
func (m *MockExitHandler) IsNewFuncExecutionAllowed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNewFuncExecutionAllowed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNewFuncExecutionAllowed indicates an expected call of IsNewFuncExecutionAllowed.
func (mr *MockExitHandlerMockRecorder) IsNewFuncExecutionAllowed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNewFuncExecutionAllowed", reflect.TypeOf((*MockExitHandler)(nil).IsNewFuncExecutionAllowed))
}

// ProperExitDefer mocks base method.
func (m *MockExitHandler) ProperExitDefer() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProperExitDefer")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// ProperExitDefer indicates an expected call of ProperExitDefer.
func (mr *MockExitHandlerMockRecorder) ProperExitDefer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProperExitDefer", reflect.TypeOf((*MockExitHandler)(nil).ProperExitDefer))
}

// ShutdownGrpcServerBeforeExit mocks base method.
func (m *MockExitHandler) ShutdownGrpcServerBeforeExit(grpcServer *grpc.Server) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShutdownGrpcServerBeforeExit", grpcServer)
}

// ShutdownGrpcServerBeforeExit indicates an expected call of ShutdownGrpcServerBeforeExit.
func (mr *MockExitHandlerMockRecorder) ShutdownGrpcServerBeforeExit(grpcServer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownGrpcServerBeforeExit", reflect.TypeOf((*MockExitHandler)(nil).ShutdownGrpcServerBeforeExit), grpcServer)
}

// ShutdownHTTPServerBeforeExit mocks base method.
func (m *MockExitHandler) ShutdownHTTPServerBeforeExit(httpServer *http.Server) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShutdownHTTPServerBeforeExit", httpServer)
}

// ShutdownHTTPServerBeforeExit indicates an expected call of ShutdownHTTPServerBeforeExit.
func (mr *MockExitHandlerMockRecorder) ShutdownHTTPServerBeforeExit(httpServer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownHTTPServerBeforeExit", reflect.TypeOf((*MockExitHandler)(nil).ShutdownHTTPServerBeforeExit), httpServer)
}

// ToCancel mocks base method.
func (m *MockExitHandler) ToCancel(arg0 []context.CancelFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToCancel", arg0)
}

// ToCancel indicates an expected call of ToCancel.
func (mr *MockExitHandlerMockRecorder) ToCancel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToCancel", reflect.TypeOf((*MockExitHandler)(nil).ToCancel), arg0)
}

// ToClose mocks base method.
func (m *MockExitHandler) ToClose(arg0 []io.Closer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToClose", arg0)
}

// ToClose indicates an expected call of ToClose.
func (mr *MockExitHandlerMockRecorder) ToClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToClose", reflect.TypeOf((*MockExitHandler)(nil).ToClose), arg0)
}

// ToExecute mocks base method.
func (m *MockExitHandler) ToExecute(arg0 []func(context.Context) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToExecute", arg0)
}

// ToExecute indicates an expected call of ToExecute.
func (mr *MockExitHandlerMockRecorder) ToExecute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToExecute", reflect.TypeOf((*MockExitHandler)(nil).ToExecute), arg0)
}

// ToStop mocks base method.
func (m *MockExitHandler) ToStop(arg0 []chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToStop", arg0)
}

// ToStop indicates an expected call of ToStop.
func (mr *MockExitHandlerMockRecorder) ToStop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToStop", reflect.TypeOf((*MockExitHandler)(nil).ToStop), arg0)
}
