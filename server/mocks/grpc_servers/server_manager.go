// Code generated by MockGen. DO NOT EDIT.
// Source: server_manager.go

// Package grpc_servers is a generated GoMock package.
package grpc_servers

import (
	reflect "reflect"
	pb "github.com/stsg/gophkeeper2/pkg/pb"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockServerManager is a mock of ServerManager interface.
type MockServerManager struct {
	ctrl     *gomock.Controller
	recorder *MockServerManagerMockRecorder
}

// MockServerManagerMockRecorder is the mock recorder for MockServerManager.
type MockServerManagerMockRecorder struct {
	mock *MockServerManager
}

// NewMockServerManager creates a new mock instance.
func NewMockServerManager(ctrl *gomock.Controller) *MockServerManager {
	mock := &MockServerManager{ctrl: ctrl}
	mock.recorder = &MockServerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerManager) EXPECT() *MockServerManagerMockRecorder {
	return m.recorder
}

// RegisterAuthServer mocks base method.
func (m *MockServerManager) RegisterAuthServer(authServer pb.AuthServer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterAuthServer", authServer)
}

// RegisterAuthServer indicates an expected call of RegisterAuthServer.
func (mr *MockServerManagerMockRecorder) RegisterAuthServer(authServer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAuthServer", reflect.TypeOf((*MockServerManager)(nil).RegisterAuthServer), authServer)
}

// RegisterResourcesServer mocks base method.
func (m *MockServerManager) RegisterResourcesServer(resServer pb.ResourcesServer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterResourcesServer", resServer)
}

// RegisterResourcesServer indicates an expected call of RegisterResourcesServer.
func (mr *MockServerManagerMockRecorder) RegisterResourcesServer(resServer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterResourcesServer", reflect.TypeOf((*MockServerManager)(nil).RegisterResourcesServer), resServer)
}

// Start mocks base method.
func (m *MockServerManager) Start(port string) (*grpc.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", port)
	ret0, _ := ret[0].(*grpc.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockServerManagerMockRecorder) Start(port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServerManager)(nil).Start), port)
}
