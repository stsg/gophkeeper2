// Code generated by MockGen. DO NOT EDIT.
// Source: db_provider.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgxpool "github.com/jackc/pgx/v4/pgxpool"
)

// MockDBProvider is a mock of DBProvider interface.
type MockDBProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDBProviderMockRecorder
}

// MockDBProviderMockRecorder is the mock recorder for MockDBProvider.
type MockDBProviderMockRecorder struct {
	mock *MockDBProvider
}

// NewMockDBProvider creates a new mock instance.
func NewMockDBProvider(ctrl *gomock.Controller) *MockDBProvider {
	mock := &MockDBProvider{ctrl: ctrl}
	mock.recorder = &MockDBProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBProvider) EXPECT() *MockDBProviderMockRecorder {
	return m.recorder
}

// GetConnection mocks base method.
func (m *MockDBProvider) GetConnection(ctx context.Context) (*pgxpool.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", ctx)
	ret0, _ := ret[0].(*pgxpool.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockDBProviderMockRecorder) GetConnection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockDBProvider)(nil).GetConnection), ctx)
}

// HealthCheck mocks base method.
func (m *MockDBProvider) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockDBProviderMockRecorder) HealthCheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockDBProvider)(nil).HealthCheck), ctx)
}
